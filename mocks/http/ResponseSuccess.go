// Code generated by mockery. DO NOT EDIT.

package http

import (
	http "github.com/goravel/framework/contracts/http"
	mock "github.com/stretchr/testify/mock"
)

// ResponseSuccess is an autogenerated mock type for the ResponseSuccess type
type ResponseSuccess struct {
	mock.Mock
}

type ResponseSuccess_Expecter struct {
	mock *mock.Mock
}

func (_m *ResponseSuccess) EXPECT() *ResponseSuccess_Expecter {
	return &ResponseSuccess_Expecter{mock: &_m.Mock}
}

// Data provides a mock function with given fields: contentType, data
func (_m *ResponseSuccess) Data(contentType string, data []byte) http.Response {
	ret := _m.Called(contentType, data)

	if len(ret) == 0 {
		panic("no return value specified for Data")
	}

	var r0 http.Response
	if rf, ok := ret.Get(0).(func(string, []byte) http.Response); ok {
		r0 = rf(contentType, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Response)
		}
	}

	return r0
}

// ResponseSuccess_Data_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Data'
type ResponseSuccess_Data_Call struct {
	*mock.Call
}

// Data is a helper method to define mock.On call
//   - contentType string
//   - data []byte
func (_e *ResponseSuccess_Expecter) Data(contentType interface{}, data interface{}) *ResponseSuccess_Data_Call {
	return &ResponseSuccess_Data_Call{Call: _e.mock.On("Data", contentType, data)}
}

func (_c *ResponseSuccess_Data_Call) Run(run func(contentType string, data []byte)) *ResponseSuccess_Data_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]byte))
	})
	return _c
}

func (_c *ResponseSuccess_Data_Call) Return(_a0 http.Response) *ResponseSuccess_Data_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResponseSuccess_Data_Call) RunAndReturn(run func(string, []byte) http.Response) *ResponseSuccess_Data_Call {
	_c.Call.Return(run)
	return _c
}

// Json provides a mock function with given fields: obj
func (_m *ResponseSuccess) Json(obj interface{}) http.Response {
	ret := _m.Called(obj)

	if len(ret) == 0 {
		panic("no return value specified for Json")
	}

	var r0 http.Response
	if rf, ok := ret.Get(0).(func(interface{}) http.Response); ok {
		r0 = rf(obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Response)
		}
	}

	return r0
}

// ResponseSuccess_Json_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Json'
type ResponseSuccess_Json_Call struct {
	*mock.Call
}

// Json is a helper method to define mock.On call
//   - obj interface{}
func (_e *ResponseSuccess_Expecter) Json(obj interface{}) *ResponseSuccess_Json_Call {
	return &ResponseSuccess_Json_Call{Call: _e.mock.On("Json", obj)}
}

func (_c *ResponseSuccess_Json_Call) Run(run func(obj interface{})) *ResponseSuccess_Json_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *ResponseSuccess_Json_Call) Return(_a0 http.Response) *ResponseSuccess_Json_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResponseSuccess_Json_Call) RunAndReturn(run func(interface{}) http.Response) *ResponseSuccess_Json_Call {
	_c.Call.Return(run)
	return _c
}

// String provides a mock function with given fields: format, values
func (_m *ResponseSuccess) String(format string, values ...interface{}) http.Response {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 http.Response
	if rf, ok := ret.Get(0).(func(string, ...interface{}) http.Response); ok {
		r0 = rf(format, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Response)
		}
	}

	return r0
}

// ResponseSuccess_String_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'String'
type ResponseSuccess_String_Call struct {
	*mock.Call
}

// String is a helper method to define mock.On call
//   - format string
//   - values ...interface{}
func (_e *ResponseSuccess_Expecter) String(format interface{}, values ...interface{}) *ResponseSuccess_String_Call {
	return &ResponseSuccess_String_Call{Call: _e.mock.On("String",
		append([]interface{}{format}, values...)...)}
}

func (_c *ResponseSuccess_String_Call) Run(run func(format string, values ...interface{})) *ResponseSuccess_String_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *ResponseSuccess_String_Call) Return(_a0 http.Response) *ResponseSuccess_String_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResponseSuccess_String_Call) RunAndReturn(run func(string, ...interface{}) http.Response) *ResponseSuccess_String_Call {
	_c.Call.Return(run)
	return _c
}

// NewResponseSuccess creates a new instance of ResponseSuccess. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResponseSuccess(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResponseSuccess {
	mock := &ResponseSuccess{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

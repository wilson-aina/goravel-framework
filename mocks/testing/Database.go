// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	seeder "github.com/goravel/framework/contracts/database/seeder"
	testing "github.com/goravel/framework/contracts/testing"
	mock "github.com/stretchr/testify/mock"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

type Database_Expecter struct {
	mock *mock.Mock
}

func (_m *Database) EXPECT() *Database_Expecter {
	return &Database_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with given fields:
func (_m *Database) Build() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type Database_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
func (_e *Database_Expecter) Build() *Database_Build_Call {
	return &Database_Build_Call{Call: _e.mock.On("Build")}
}

func (_c *Database_Build_Call) Run(run func()) *Database_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_Build_Call) Return(_a0 error) *Database_Build_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Build_Call) RunAndReturn(run func() error) *Database_Build_Call {
	_c.Call.Return(run)
	return _c
}

// Clear provides a mock function with given fields:
func (_m *Database) Clear() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Clear")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type Database_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
func (_e *Database_Expecter) Clear() *Database_Clear_Call {
	return &Database_Clear_Call{Call: _e.mock.On("Clear")}
}

func (_c *Database_Clear_Call) Run(run func()) *Database_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_Clear_Call) Return(_a0 error) *Database_Clear_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Clear_Call) RunAndReturn(run func() error) *Database_Clear_Call {
	_c.Call.Return(run)
	return _c
}

// Config provides a mock function with given fields:
func (_m *Database) Config() testing.DatabaseConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Config")
	}

	var r0 testing.DatabaseConfig
	if rf, ok := ret.Get(0).(func() testing.DatabaseConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(testing.DatabaseConfig)
	}

	return r0
}

// Database_Config_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Config'
type Database_Config_Call struct {
	*mock.Call
}

// Config is a helper method to define mock.On call
func (_e *Database_Expecter) Config() *Database_Config_Call {
	return &Database_Config_Call{Call: _e.mock.On("Config")}
}

func (_c *Database_Config_Call) Run(run func()) *Database_Config_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_Config_Call) Return(_a0 testing.DatabaseConfig) *Database_Config_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Config_Call) RunAndReturn(run func() testing.DatabaseConfig) *Database_Config_Call {
	_c.Call.Return(run)
	return _c
}

// Image provides a mock function with given fields: _a0
func (_m *Database) Image(_a0 testing.Image) {
	_m.Called(_a0)
}

// Database_Image_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Image'
type Database_Image_Call struct {
	*mock.Call
}

// Image is a helper method to define mock.On call
//   - _a0 testing.Image
func (_e *Database_Expecter) Image(_a0 interface{}) *Database_Image_Call {
	return &Database_Image_Call{Call: _e.mock.On("Image", _a0)}
}

func (_c *Database_Image_Call) Run(run func(_a0 testing.Image)) *Database_Image_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(testing.Image))
	})
	return _c
}

func (_c *Database_Image_Call) Return() *Database_Image_Call {
	_c.Call.Return()
	return _c
}

func (_c *Database_Image_Call) RunAndReturn(run func(testing.Image)) *Database_Image_Call {
	_c.Call.Return(run)
	return _c
}

// Seed provides a mock function with given fields: seeds
func (_m *Database) Seed(seeds ...seeder.Seeder) {
	_va := make([]interface{}, len(seeds))
	for _i := range seeds {
		_va[_i] = seeds[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Database_Seed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Seed'
type Database_Seed_Call struct {
	*mock.Call
}

// Seed is a helper method to define mock.On call
//   - seeds ...seeder.Seeder
func (_e *Database_Expecter) Seed(seeds ...interface{}) *Database_Seed_Call {
	return &Database_Seed_Call{Call: _e.mock.On("Seed",
		append([]interface{}{}, seeds...)...)}
}

func (_c *Database_Seed_Call) Run(run func(seeds ...seeder.Seeder)) *Database_Seed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]seeder.Seeder, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(seeder.Seeder)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *Database_Seed_Call) Return() *Database_Seed_Call {
	_c.Call.Return()
	return _c
}

func (_c *Database_Seed_Call) RunAndReturn(run func(...seeder.Seeder)) *Database_Seed_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *Database) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Database_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type Database_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *Database_Expecter) Stop() *Database_Stop_Call {
	return &Database_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *Database_Stop_Call) Run(run func()) *Database_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Database_Stop_Call) Return(_a0 error) *Database_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Database_Stop_Call) RunAndReturn(run func() error) *Database_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

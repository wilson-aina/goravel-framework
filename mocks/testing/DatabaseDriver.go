// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	dockertest "github.com/ory/dockertest/v3"
	mock "github.com/stretchr/testify/mock"

	orm "github.com/goravel/framework/contracts/database/orm"

	testing "github.com/goravel/framework/contracts/testing"
)

// DatabaseDriver is an autogenerated mock type for the DatabaseDriver type
type DatabaseDriver struct {
	mock.Mock
}

// Clear provides a mock function with given fields: pool, resource
func (_m *DatabaseDriver) Clear(pool *dockertest.Pool, resource *dockertest.Resource) error {
	ret := _m.Called(pool, resource)

	var r0 error
	if rf, ok := ret.Get(0).(func(*dockertest.Pool, *dockertest.Resource) error); ok {
		r0 = rf(pool, resource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Config provides a mock function with given fields: resource
func (_m *DatabaseDriver) Config(resource *dockertest.Resource) testing.Config {
	ret := _m.Called(resource)

	var r0 testing.Config
	if rf, ok := ret.Get(0).(func(*dockertest.Resource) testing.Config); ok {
		r0 = rf(resource)
	} else {
		r0 = ret.Get(0).(testing.Config)
	}

	return r0
}

// Image provides a mock function with given fields:
func (_m *DatabaseDriver) Image() *dockertest.RunOptions {
	ret := _m.Called()

	var r0 *dockertest.RunOptions
	if rf, ok := ret.Get(0).(func() *dockertest.RunOptions); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dockertest.RunOptions)
		}
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *DatabaseDriver) Name() orm.Driver {
	ret := _m.Called()

	var r0 orm.Driver
	if rf, ok := ret.Get(0).(func() orm.Driver); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(orm.Driver)
	}

	return r0
}

// NewDatabaseDriver creates a new instance of DatabaseDriver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabaseDriver(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatabaseDriver {
	mock := &DatabaseDriver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery. DO NOT EDIT.

package testing

import (
	orm "github.com/goravel/framework/contracts/database/orm"
	testing "github.com/goravel/framework/contracts/testing"
	mock "github.com/stretchr/testify/mock"
)

// DatabaseDriver is an autogenerated mock type for the DatabaseDriver type
type DatabaseDriver struct {
	mock.Mock
}

type DatabaseDriver_Expecter struct {
	mock *mock.Mock
}

func (_m *DatabaseDriver) EXPECT() *DatabaseDriver_Expecter {
	return &DatabaseDriver_Expecter{mock: &_m.Mock}
}

// Build provides a mock function with given fields:
func (_m *DatabaseDriver) Build() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Build")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatabaseDriver_Build_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Build'
type DatabaseDriver_Build_Call struct {
	*mock.Call
}

// Build is a helper method to define mock.On call
func (_e *DatabaseDriver_Expecter) Build() *DatabaseDriver_Build_Call {
	return &DatabaseDriver_Build_Call{Call: _e.mock.On("Build")}
}

func (_c *DatabaseDriver_Build_Call) Run(run func()) *DatabaseDriver_Build_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DatabaseDriver_Build_Call) Return(_a0 error) *DatabaseDriver_Build_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseDriver_Build_Call) RunAndReturn(run func() error) *DatabaseDriver_Build_Call {
	_c.Call.Return(run)
	return _c
}

// Config provides a mock function with given fields:
func (_m *DatabaseDriver) Config() testing.DatabaseConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Config")
	}

	var r0 testing.DatabaseConfig
	if rf, ok := ret.Get(0).(func() testing.DatabaseConfig); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(testing.DatabaseConfig)
	}

	return r0
}

// DatabaseDriver_Config_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Config'
type DatabaseDriver_Config_Call struct {
	*mock.Call
}

// Config is a helper method to define mock.On call
func (_e *DatabaseDriver_Expecter) Config() *DatabaseDriver_Config_Call {
	return &DatabaseDriver_Config_Call{Call: _e.mock.On("Config")}
}

func (_c *DatabaseDriver_Config_Call) Run(run func()) *DatabaseDriver_Config_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DatabaseDriver_Config_Call) Return(_a0 testing.DatabaseConfig) *DatabaseDriver_Config_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseDriver_Config_Call) RunAndReturn(run func() testing.DatabaseConfig) *DatabaseDriver_Config_Call {
	_c.Call.Return(run)
	return _c
}

// Fresh provides a mock function with given fields:
func (_m *DatabaseDriver) Fresh() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Fresh")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatabaseDriver_Fresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fresh'
type DatabaseDriver_Fresh_Call struct {
	*mock.Call
}

// Fresh is a helper method to define mock.On call
func (_e *DatabaseDriver_Expecter) Fresh() *DatabaseDriver_Fresh_Call {
	return &DatabaseDriver_Fresh_Call{Call: _e.mock.On("Fresh")}
}

func (_c *DatabaseDriver_Fresh_Call) Run(run func()) *DatabaseDriver_Fresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DatabaseDriver_Fresh_Call) Return(_a0 error) *DatabaseDriver_Fresh_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseDriver_Fresh_Call) RunAndReturn(run func() error) *DatabaseDriver_Fresh_Call {
	_c.Call.Return(run)
	return _c
}

// Image provides a mock function with given fields: image
func (_m *DatabaseDriver) Image(image testing.Image) {
	_m.Called(image)
}

// DatabaseDriver_Image_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Image'
type DatabaseDriver_Image_Call struct {
	*mock.Call
}

// Image is a helper method to define mock.On call
//   - image testing.Image
func (_e *DatabaseDriver_Expecter) Image(image interface{}) *DatabaseDriver_Image_Call {
	return &DatabaseDriver_Image_Call{Call: _e.mock.On("Image", image)}
}

func (_c *DatabaseDriver_Image_Call) Run(run func(image testing.Image)) *DatabaseDriver_Image_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(testing.Image))
	})
	return _c
}

func (_c *DatabaseDriver_Image_Call) Return() *DatabaseDriver_Image_Call {
	_c.Call.Return()
	return _c
}

func (_c *DatabaseDriver_Image_Call) RunAndReturn(run func(testing.Image)) *DatabaseDriver_Image_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *DatabaseDriver) Name() orm.Driver {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 orm.Driver
	if rf, ok := ret.Get(0).(func() orm.Driver); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(orm.Driver)
	}

	return r0
}

// DatabaseDriver_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type DatabaseDriver_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *DatabaseDriver_Expecter) Name() *DatabaseDriver_Name_Call {
	return &DatabaseDriver_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *DatabaseDriver_Name_Call) Run(run func()) *DatabaseDriver_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DatabaseDriver_Name_Call) Return(_a0 orm.Driver) *DatabaseDriver_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseDriver_Name_Call) RunAndReturn(run func() orm.Driver) *DatabaseDriver_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *DatabaseDriver) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DatabaseDriver_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type DatabaseDriver_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *DatabaseDriver_Expecter) Stop() *DatabaseDriver_Stop_Call {
	return &DatabaseDriver_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *DatabaseDriver_Stop_Call) Run(run func()) *DatabaseDriver_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DatabaseDriver_Stop_Call) Return(_a0 error) *DatabaseDriver_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DatabaseDriver_Stop_Call) RunAndReturn(run func() error) *DatabaseDriver_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewDatabaseDriver creates a new instance of DatabaseDriver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabaseDriver(t interface {
	mock.TestingT
	Cleanup(func())
}) *DatabaseDriver {
	mock := &DatabaseDriver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

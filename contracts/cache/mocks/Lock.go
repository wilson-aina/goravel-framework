// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// Lock is an autogenerated mock type for the Lock type
type Lock struct {
	mock.Mock
}

// Block provides a mock function with given fields: t, callback
func (_m *Lock) Block(t time.Duration, callback ...func()) bool {
	_va := make([]interface{}, len(callback))
	for _i := range callback {
		_va[_i] = callback[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, t)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(time.Duration, ...func()) bool); ok {
		r0 = rf(t, callback...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ForceRelease provides a mock function with given fields:
func (_m *Lock) ForceRelease() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Get provides a mock function with given fields: callback
func (_m *Lock) Get(callback ...func()) bool {
	_va := make([]interface{}, len(callback))
	for _i := range callback {
		_va[_i] = callback[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 bool
	if rf, ok := ret.Get(0).(func(...func()) bool); ok {
		r0 = rf(callback...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Release provides a mock function with given fields:
func (_m *Lock) Release() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

type mockConstructorTestingTNewLock interface {
	mock.TestingT
	Cleanup(func())
}

// NewLock creates a new instance of Lock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLock(t mockConstructorTestingTNewLock) *Lock {
	mock := &Lock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

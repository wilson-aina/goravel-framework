// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/goravel/framework/contracts/database"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// Orm is an autogenerated mock type for the Orm type
type Orm struct {
	mock.Mock
}

// Connection provides a mock function with given fields: name
func (_m *Orm) Connection(name string) database.Orm {
	ret := _m.Called(name)

	var r0 database.Orm
	if rf, ok := ret.Get(0).(func(string) database.Orm); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.Orm)
		}
	}

	return r0
}

// DB provides a mock function with given fields:
func (_m *Orm) DB() (*sql.DB, error) {
	ret := _m.Called()

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Query provides a mock function with given fields:
func (_m *Orm) Query() database.Query {
	ret := _m.Called()

	var r0 database.Query
	if rf, ok := ret.Get(0).(func() database.Query); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.Query)
		}
	}

	return r0
}

// Transaction provides a mock function with given fields: txFunc
func (_m *Orm) Transaction(txFunc func(database.Transaction) error) error {
	ret := _m.Called(txFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(database.Transaction) error) error); ok {
		r0 = rf(txFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WithContext provides a mock function with given fields: ctx
func (_m *Orm) WithContext(ctx context.Context) database.Orm {
	ret := _m.Called(ctx)

	var r0 database.Orm
	if rf, ok := ret.Get(0).(func(context.Context) database.Orm); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.Orm)
		}
	}

	return r0
}

type mockConstructorTestingTNewOrm interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrm creates a new instance of Orm. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrm(t mockConstructorTestingTNewOrm) *Orm {
	mock := &Orm{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

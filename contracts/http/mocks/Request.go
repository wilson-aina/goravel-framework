// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	filesystem "github.com/goravel/framework/contracts/filesystem"
	http "github.com/goravel/framework/contracts/http"

	mock "github.com/stretchr/testify/mock"

	nethttp "net/http"
)

// Request is an autogenerated mock type for the Request type
type Request struct {
	mock.Mock
}

// AbortWithStatus provides a mock function with given fields: code
func (_m *Request) AbortWithStatus(code int) {
	_m.Called(code)
}

// AbortWithStatusJson provides a mock function with given fields: code, jsonObj
func (_m *Request) AbortWithStatusJson(code int, jsonObj interface{}) {
	_m.Called(code, jsonObj)
}

// Bind provides a mock function with given fields: obj
func (_m *Request) Bind(obj interface{}) error {
	ret := _m.Called(obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// File provides a mock function with given fields: name
func (_m *Request) File(name string) (filesystem.File, error) {
	ret := _m.Called(name)

	var r0 filesystem.File
	if rf, ok := ret.Get(0).(func(string) filesystem.File); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(filesystem.File)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Form provides a mock function with given fields: key, defaultValue
func (_m *Request) Form(key string, defaultValue string) string {
	ret := _m.Called(key, defaultValue)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(key, defaultValue)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// FullUrl provides a mock function with given fields:
func (_m *Request) FullUrl() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Header provides a mock function with given fields: key, defaultValue
func (_m *Request) Header(key string, defaultValue string) string {
	ret := _m.Called(key, defaultValue)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(key, defaultValue)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Headers provides a mock function with given fields:
func (_m *Request) Headers() nethttp.Header {
	ret := _m.Called()

	var r0 nethttp.Header
	if rf, ok := ret.Get(0).(func() nethttp.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(nethttp.Header)
		}
	}

	return r0
}

// Input provides a mock function with given fields: key
func (_m *Request) Input(key string) string {
	ret := _m.Called(key)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Ip provides a mock function with given fields:
func (_m *Request) Ip() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Method provides a mock function with given fields:
func (_m *Request) Method() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Next provides a mock function with given fields:
func (_m *Request) Next() {
	_m.Called()
}

// Origin provides a mock function with given fields:
func (_m *Request) Origin() *nethttp.Request {
	ret := _m.Called()

	var r0 *nethttp.Request
	if rf, ok := ret.Get(0).(func() *nethttp.Request); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nethttp.Request)
		}
	}

	return r0
}

// Path provides a mock function with given fields:
func (_m *Request) Path() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Query provides a mock function with given fields: key, defaultValue
func (_m *Request) Query(key string, defaultValue string) string {
	ret := _m.Called(key, defaultValue)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(key, defaultValue)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Response provides a mock function with given fields:
func (_m *Request) Response() http.Response {
	ret := _m.Called()

	var r0 http.Response
	if rf, ok := ret.Get(0).(func() http.Response); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Response)
		}
	}

	return r0
}

// Url provides a mock function with given fields:
func (_m *Request) Url() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type NewRequestT interface {
	mock.TestingT
	Cleanup(func())
}

// NewRequest creates a new instance of Request. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRequest(t NewRequestT) *Request {
	mock := &Request{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
